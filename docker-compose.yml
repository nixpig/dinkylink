version: "3.1"

services:
  dinkylink_proxy:
    restart: always
    image: nginx:1.25.2-alpine
    environment:
      - SSL_CERT=${SSL_CERT}
      - SSL_CERT_KEY=${SSL_CERT_KEY}
      - SSL_CERT_DIRECTORY=${SSL_CERT_DIRECTORY}
      - SHELL_UI_PUBLIC_HOST=${SHELL_UI_PUBLIC_HOST}
      - VIEW_UI_PUBLIC_HOST=${VIEW_UI_PUBLIC_HOST}
      - VIEW_SOCKET_PUBLIC_HOST=${VIEW_SOCKET_PUBLIC_HOST}
      - VIEW_GO_PUBLIC_HOST=${VIEW_GO_PUBLIC_HOST}
      - CREATE_API_PUBLIC_HOST=${CREATE_API_PUBLIC_HOST}
      - SHELL_UI_DOCKER_HOST=${SHELL_UI_DOCKER_HOST}
      - SHELL_UI_PORT=${SHELL_UI_PORT}
      - VIEW_UI_DOCKER_HOST=${VIEW_UI_DOCKER_HOST}
      - VIEW_UI_PORT=${VIEW_UI_PORT}
      - VIEW_API_DOCKER_HOST=${VIEW_API_DOCKER_HOST}
      - VIEW_API_PORT=${VIEW_API_PORT}
      - VIEW_GO_DOCKER_HOST=${VIEW_GO_DOCKER_HOST}
      - VIEW_GO_PORT=${VIEW_GO_PORT}
      - CREATE_UI_DOCKER_HOST=${CREATE_UI_DOCKER_HOST}
      - CREATE_UI_PORT=${CREATE_UI_PORT}
      - CREATE_API_DOCKER_HOST=${CREATE_API_DOCKER_HOST}
      - CREATE_API_PORT=${CREATE_API_PORT}

    ports:
      - 80:80
      - 443:443
    volumes:
      - ./services/proxy/templates:/etc/nginx/templates
      - ${SSL_CERT_DIRECTORY}:/etc/nginx/ssl:so
    depends_on:
      - create_ui
      - create_api
      - create_db
    networks:
      - dinkylink_net

  create_db:
    restart: always
    image: dinkylink_create_db
    build:
      context: services/create/db
      dockerfile: Dockerfile
    env_file:
      - .env
    command: ["--auth"]
    ports:
      - 127.0.0.1:${CREATE_DB_PORT}:${CREATE_DB_PORT}
    volumes:
      - ./services/create/db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:sodocker
      - create_db_volume:/data/db
    networks:
      - dinkylink_net

  create_api:
    restart: always
    image: dinkylink_create_api
    build:
      context: services/create/api
      dockerfile: Dockerfile
      args:
        - CREATE_API_PORT=${CREATE_API_PORT}
    env_file:
      - .env
    ports:
      - 127.0.0.1:${CREATE_API_PORT}:${CREATE_API_PORT}
    depends_on:
      - create_db
    networks:
      - dinkylink_net

  create_ui:
    restart: always
    image: dinkylink_create_ui
    build:
      context: services/create/ui
      dockerfile: Dockerfile
      args:
        - CREATE_UI_PORT=${CREATE_UI_PORT}
        - CREATE_API_PUBLIC_HOST=${CREATE_API_PUBLIC_HOST}
    ports:
      - 127.0.0.1:${CREATE_UI_PORT}:${CREATE_UI_PORT}
    depends_on:
      - create_api
    networks:
      - dinkylink_net

  view_api:
    restart: always
    image: dinkylink_view_api
    build:
      context: services/view/api
      dockerfile: Dockerfile
      args:
        - VIEW_API_PORT=${VIEW_API_PORT}
    env_file:
      - .env
    ports:
      - 127.0.0.1:${VIEW_API_PORT}:${VIEW_API_PORT}
      - 127.0.0.1:${VIEW_GO_PORT}:${VIEW_GO_PORT}
    depends_on:
      - cache
    networks:
      - dinkylink_net

  view_ui:
    restart: always
    image: dinkylink_view_ui
    build:
      context: services/view/ui
      dockerfile: Dockerfile
      args:
        - VIEW_UI_PORT=${VIEW_UI_PORT}
        - VIEW_SOCKET_PUBLIC_HOST=${VIEW_SOCKET_PUBLIC_HOST}
        - VIEW_GO_PUBLIC_HOST=${VIEW_GO_PUBLIC_HOST}
    ports:
      - 127.0.0.1:${VIEW_UI_PORT}:${VIEW_UI_PORT}
    depends_on:
      - cache
    networks:
      - dinkylink_net

  shell_ui:
    restart: always
    image: dinkylink_shell_ui
    build:
      context: services/shell/ui
      dockerfile: Dockerfile
      args:
        - SHELL_UI_PORT=${SHELL_UI_PORT}
        - CREATE_UI_PUBLIC_HOST=${CREATE_UI_PUBLIC_HOST}
        - VIEW_UI_PUBLIC_HOST=${VIEW_UI_PUBLIC_HOST}
    ports:
      - 127.0.0.1:${SHELL_UI_PORT}:${SHELL_UI_PORT}
    depends_on:
      - create_ui
      - view_ui
    networks:
      - dinkylink_net

  bus:
    restart: always
    image: redis:7.2.0-alpine
    env_file:
      - .env
    volumes:
      - bus_volume:/data
    networks:
      - dinkylink_net

  cache:
    restart: always
    image: redis:7.2.0-alpine
    env_file:
      - .env
    volumes:
      - cache_volume:/data
    networks:
      - dinkylink_net

  stream:
    restart: always
    image: redis:7.2.0-alpine
    env_file:
      - .env
    volumes:
      - stream_volume:/data
    networks:
      - dinkylink_net

  stats_api:
    restart: always
    image: dinkylink_stats_api
    build:
      context: services/stats/api
      dockerfile: Dockerfile
      args:
        - STATS_API_PORT=${STATS_API_PORT}
    env_file:
      - .env
    ports:
      - 127.0.0.1:${STATS_API_PORT}:${STATS_API_PORT}
    depends_on:
      - bus
    networks:
      - dinkylink_net

volumes:
  create_db_volume:
  view_db_volume:
  bus_volume:
  cache_volume:
  stream_volume:

networks:
  dinkylink_net:
    driver: bridge
